pathForestfile   = file.path(inputDataFolder,forest_prefix)
forest_list_type = c("lcForest","lc60","lc70","lc90","lc100","lc120") # "lcForest"
forest_meanfix   = paste0(areaFileName,"_")
}
# Load characteristics of points for forest_type
source(file.path(SurEau_mainDir,"scripts_base_simulations/Fonctions_InversionRU.R"))
selectPoints = loadPoints(workPoints, map_grid,
pathLAIfile, laiyears, lai_suffix,
pathSoilFile, typeSoilInfo, listSoils,
path_climate, idigit, prefix, suffix, clim_site, pathClimateClassfile,
pathForestfile, forest_suffix, forest_type = iforest_type, forest_list_type = forest_list_type, forest_meanfix = forest_meanfix, check_clim_exist  = check_clim_exist, check_clim_values = check_clim_values)
if ( length(list_forest) >  1 ) forestT_selectPoints[[iforest_type]] = selectPoints #if forest_type == "all"
if ( length(list_forest) == 1 && nrow(selectPoints) == length(siteNames)) selectPoints = cbind(siteNames, selectPoints) # forest_type != "all"
if (!is.null(fileWithInData) && (!file.exists(fileWithInData) || overwritePts) ) fwrite(selectPoints,file=fileWithInData,row.names=F,col.names=T,sep=";")
} else {
selectPoints = fread(fileWithInData)
if ( length(list_forest) >  1 ) forestT_selectPoints[[iforest_type]] = selectPoints #if forest_type == "all"
}
cat(" --> done\n")
}
# Compute number of points
if ( FALSE ) {
nb_points = NULL
for ( iforest in forest_list_type ) {
nb_points = c(nb_points, sum(selectPoints[[iforest]] > limFracForest))
}
nb_points
}
# Extract mean LAI
if ( FALSE ) {
if ( forest_type == "all" ) {
list_forest = c("lc60","lc70","lc90","lc100","lc120")
} else (
list_forest = forest_type
)
LAI_mean = NULL
for ( iforest_type in list_forest ) {
# Select the good data
if ( length(list_forest) >  1 ) tmp_pointsData = forestT_selectPoints[[iforest_type]][,c(1:which(colnames(selectPoints)=="climName"))] else tmp_pointsData = selectPoints[,c(1:which(colnames(selectPoints)=="climName"))]
# remove points without enough data
if ( !is.null(limFracForest) && limFracForest>0 ) tmp_pointsData = tmp_pointsData[tmp_pointsData[,"forest_frac"] > limFracForest,]
LAI_tmp = LAImeanLC_Koppen(tmp_pointsData, LAIname = "LAI_max")
if ( is.null(LAI_mean) ) {
LAI_mean = cbind(LAI_mean, LAI_tmp)
} else {
LAI_mean_tmp = NULL
for ( irow in unique(c(rownames(LAI_mean),names(LAI_tmp))) ) {
if ( irow%in%rownames(LAI_mean) && is.null(LAI_tmp[[irow]]) ) {
LAI_mean_tmp = rbind(LAI_mean_tmp, c(LAI_mean[irow,], NA) )
} else if ( irow%in%rownames(LAI_mean) ) {
LAI_mean_tmp = rbind(LAI_mean_tmp, c(LAI_mean[irow,], LAI_tmp[[irow]]) )
} else {
LAI_mean_tmp = rbind(LAI_mean_tmp, c(rep(NA, ncol(LAI_mean)), LAI_tmp[[irow]]) )
}
}
rownames(LAI_mean_tmp) = unique(c(rownames(LAI_mean),names(LAI_tmp)))
LAI_mean = LAI_mean_tmp
}
# LAI_mean = cbind(LAI_mean, LAI_tmp)
}
colnames(LAI_mean) = list_forest
}
# In case of choice of dominant forest, create the new list of data
if ( forest_type == "all" ) {
cat("Select the main specie for each point")
mainVeget = forestT_selectPoints[["lcForest"]][["mainForest"]]
selectPoints = NULL
for ( iPts in c(1:nrow(forestT_selectPoints[["lcForest"]])) ) {
iPts_corresp = which(as.numeric(forestT_selectPoints[["lcForest"]][iPts,'x'])==as.numeric(unlist(forestT_selectPoints[[mainVeget[iPts]]][,'x'])) & as.numeric(forestT_selectPoints[["lcForest"]][iPts,'y'])==as.numeric(unlist(forestT_selectPoints[[mainVeget[iPts]]][,'y'])))
if ( length(iPts_corresp) > 0 ) selectPoints = rbind(selectPoints, cbind(classForest = mainVeget[iPts],forestT_selectPoints[[mainVeget[iPts]]][iPts_corresp[1],]))
# if ( forestT_selectPoints[["lcForest"]][iPts,'x']!=forestT_selectPoints[[mainVeget[iPts]]][iPts,'x'] || forestT_selectPoints[["lcForest"]][iPts,'y']!=forestT_selectPoints[[mainVeget[iPts]]][iPts,'y'] ) stop ('Error in the Matrix (not corresponding coordinate).\n')
# selectPoints = rbind(selectPoints, forestT_selectPoints[[mainVeget[iPts]]][iPts,])
}
if ( nrow(selectPoints) == length(siteNames)) selectPoints = cbind(siteNames, selectPoints)
cat(" --> done\n")
}
if ( FALSE ) {
# tests barbeau
if  (!exists("selectPoints_save")) selectPoints_save = selectPoints
iNB = which(selectPoints_save[["siteNames"]]=="FR-Barbeau")
source(file.path(SurEau_mainDir,"scripts_base_simulations/Fonctions_InversionRU.R"))
library(euptf)
soilTextureId = c("C", "SiC", "SC", "SiCL", "CL", "SCL", "Si", "SiL", "L", "SL", "LS", "S", "O")
isoil = paste0("0-",profondeur_soil,"00")
# # soil_classes <- data.frame(value = seq_along(soilTextureId), soilClass = soilTextureId)
# convFactor = 13.45750708 # cm.h-1 --> mol/s/Mpa/m
# soilKsatUS = c(0.20*convFactor, 0.02*convFactor, 0.12*convFactor,  0.07*convFactor,  0.26*convFactor, 1.31*convFactor, 0.25*convFactor,
#                0.45*convFactor, 1.04*convFactor, 4.42*convFactor, 14.59*convFactor, 29.70*convFactor, 4.37*convFactor )
# # Conversion between % soil type and soil characteristics (from Gordon Bonan, Modelling Climate Change on ecosystems 2019). α in cm-1, Ksat in mol/s/Mpa/m, Ψsat_c in cm,
# # Organic soils are defined as soils having clay content >= 60 % clay and organic carbon >= 18 % , or having clay content < 60 % and organic carbon >= (12+clay*0.1).
# # But: not good correlation for organic to Ksat: ==> https://doi.org/10.5194/essd-13-1593-2021. We take the mean of other data
selectPoints = NULL
for ( iclass in soilTextureId ) {
iline_tmp = selectPoints_save[iNB,]
iline_tmp[[paste0("SoilClass_0-",profondeur_soil,"00")]] = iclass
if ( !("l_US_0-200"%in%colnames(iline_tmp)) ) colnames(iline_tmp)[which(colnames(iline_tmp)=="I_US_0-200")] = "l_US_0-200"# A supprimer dès qu'on relance le script pour creer selectsoil...
iSymbLayer = '-'
soilType = "sub"
if ( substr(isoil,1,1)=="0") soilType = "top"
idepth= (as.numeric(strsplit(isoil,iSymbLayer)[[1]][2]) - as.numeric(strsplit(isoil,iSymbLayer)[[1]][1]))/100
ptfList = c(NA,NA,'PTF19') #c('PTF08','PTF11','PTF19')
soilData = data.frame(SAMPLE_ID = c(1),TOPSOIL = soilType, TEXT_US = iline_tmp[[paste0("SoilClass_",isoil)]])
soilData = euptf_maker(soilData, ptfList, iline_tmp[[paste0("coarseFrag_",isoil,'_ori')]], idepth, 'US_', isoil, wfcSpi = 0.033, wiltSpi = 1.5848)
for ( icol in c(1:ncol(soilData)) ) {
iicol = which(colnames(iline_tmp) == colnames(soilData)[icol])
iline_tmp[[iicol]] = soilData[[icol]]
}
selectPoints = rbind(selectPoints, iline_tmp)
}
# Add soil ref fro Puechabon_ok
iline_tmp = selectPoints_save[iNB,]
iline_tmp[[paste0("SoilClass_0-",profondeur_soil,"00")]] = "PuechRef" #pueachabon_ok
if ( !("l_US_0-200"%in%colnames(iline_tmp)) ) colnames(iline_tmp)[which(colnames(iline_tmp)=="I_US_0-200")] = "l_US_0-200"# A supprimer dès qu'on relance le script pour creer selectsoil...
iline_tmp[[SE_coarseFrag_1]] = 75
iline_tmp[[SE_coarseFrag_2]] = 82
iline_tmp[[SE_coarseFrag_3]] = 94
iline_tmp[[SE_fieldCap]]     = 0.38
iline_tmp[[SE_wiltPoint]]    = 0.12379
iline_tmp[[SE_vg_alpha]]     = 0.0005
iline_tmp[[SE_vg_n]]         = 1.55
iline_tmp[[SE_vg_I]]         = 0.5
iline_tmp[[SE_vg_ksat]]      = 1.69
iline_tmp[[SE_vg_sat_cap]]   = 0.5
iline_tmp[[SE_vg_res_cap]]   = 0.098
selectPoints = rbind(selectPoints, iline_tmp)
# Add soil from ESDAC (EU_soilHydrogrids_250m_France)
iline_tmp = selectPoints_save[iNB,]
iline_tmp[[paste0("SoilClass_0-",profondeur_soil,"00")]] = "ESDAC_sl3"
if ( !("l_US_0-200"%in%colnames(iline_tmp)) ) colnames(iline_tmp)[which(colnames(iline_tmp)=="I_US_0-200")] = "l_US_0-200"# A supprimer dès qu'on relance le script pour creer selectsoil...
iline_tmp[[SE_coarseFrag_1]] = 75
iline_tmp[[SE_coarseFrag_2]] = 82
iline_tmp[[SE_coarseFrag_3]] = 94
iline_tmp[[SE_fieldCap]]     = 0.3
iline_tmp[[SE_wiltPoint]]    = 0.14
iline_tmp[[SE_vg_alpha]]     = 0.0347 #0.0163
iline_tmp[[SE_vg_n]]         = 1.1931 # 1.2851
iline_tmp[[SE_vg_I]]         = -4.3
iline_tmp[[SE_vg_ksat]]      = 14.168/100*13.45750708 # 66.23/100*13.45750708
iline_tmp[[SE_vg_sat_cap]]   = 0.4912 #0.4741
iline_tmp[[SE_vg_res_cap]]   = 0 #0.0407
selectPoints = rbind(selectPoints, iline_tmp)
iline_tmp = selectPoints_save[iNB,]
iline_tmp[[paste0("SoilClass_0-",profondeur_soil,"00")]] = "ESDAC_MRCsl3"
if ( !("l_US_0-200"%in%colnames(iline_tmp)) ) colnames(iline_tmp)[which(colnames(iline_tmp)=="I_US_0-200")] = "l_US_0-200"# A supprimer dès qu'on relance le script pour creer selectsoil...
iline_tmp[[SE_coarseFrag_1]] = 75
iline_tmp[[SE_coarseFrag_2]] = 82
iline_tmp[[SE_coarseFrag_3]] = 94
iline_tmp[[SE_fieldCap]]     = 0.3
iline_tmp[[SE_wiltPoint]]    = 0.14
iline_tmp[[SE_vg_alpha]]     = 0.0163
iline_tmp[[SE_vg_n]]         = 1.2851
iline_tmp[[SE_vg_I]]         = -4.3
iline_tmp[[SE_vg_ksat]]      = 66.23/100*13.45750708
iline_tmp[[SE_vg_sat_cap]]   = 0.4741
iline_tmp[[SE_vg_res_cap]]   = 0.0407
selectPoints = rbind(selectPoints, iline_tmp)
# selectPoints[["species"]] = "Pinus pinaster"
selectPoints[['LAI_max']] = 3
simuName = "ICOS_5m_Tests_Barbeau_LAI3"
}
if  (!exists("selectPoints_save")) selectPoints_save = selectPoints
selectPoints = NULL
iline_tmp = selectPoints_save[which(selectPoints_save[["siteNames"]]=="FR-Bilos"),]
iline_tmp[['species']] <- "Pinus pinaster"
iline_tmp[['LAI_max']] <- 2.2
selectPoints = rbind(selectPoints, iline_tmp)
selectPoints
# Config parallel simulations
runParallel = FALSE
path_climate         <- file.path(inputDataFolder, "climFiles/")
path_climate
path_climate         <- file.path(inputDataFolder, "climFiles/")
pathClimateClassfile <- file.path(inputDataFolder,"world_koppen/hdr.adf")
map_grid             <- file.path(inputDataFolder,"era5-hourly_Europe-allV-1-1981.nc")
# Define select points
if ( FALSE ) {
# workPoints <- c(5.67865,43.24079) # if point
workPoints <- c(-0.798,44.73) # landes
} else if ( FALSE ) {
# workPoints <- '/home/ardruel/Documents/FORGENIUS/SiteProposal_IS_v4_3.csv' # if list
} else if ( FALSE ) {
workPoints <- c(-10,45,30,81) # if region
} else if ( TRUE ) {
# ICOS #https://www.icos-cp.eu/observations/national-networks/france http://www.icos-etc.eu/icos/
workPoints <- NULL
workPoints[["FR-Barbeau"]]         = c( 2.780096, 48.476357) # Barbeau(Fontainebleau)
workPoints[["FR-FondBlanche"]]     = c( 5.67865 , 43.24079 ) # FondBlanche
workPoints[["FR-Hess"]]            = c( 7.06465 , 48.6741  ) # Hess
workPoints[["FR-Montiers"]]        = c( 5.31187 , 48.53816 ) # Montiers
workPoints[["FR-Puechabon"]]       = c( 3.5957  , 43.7413  ) # Puechabon
workPoints[["FR-Bilos"]]           = c(-0.956092, 44.493652) # Salles
workPoints[["IT-Renon"]]           = c(11.43369 , 46.58686)
workPoints[["IT-Bosco"]]           = c(10.741966, 45.197754)
workPoints[["IT-Rossore2"]]        = c(10.29091 , 43.73202)
workPoints[["IT-Castelporziano2"]] = c(12.357293, 41.704266)
workPoints[["IT-Capodimonte"]]     = c(14.2504  , 40.8741) # Parco Urbano di Capodimonte
workPoints[["CH-Davos"]]           = c( 9.85591 , 46.81533)
workPoints[["CZ-Lanzhot"]]         = c(16.946331, 48.68155)
workPoints[["CZ-Bily_Kriz"]]       = c(18.536882, 49.502075)
workPoints[["BE-Brasschaat"]]      = c( 4.51984 , 51.30761)
workPoints[["BE-Vielsalm"]]        = c( 5.998099, 50.304962)
workPoints[["NL-Loobos"]]          = c( 5.743556, 52.16658)
#workPoints[["DE-Kienhorst"]]       = c( , )
workPoints[["DE-Hohes_Holz"]]      = c(11.22235 , 52.08656)
workPoints[["DE-Tharandt"]]        = c(13.56515 , 50.96256)
workPoints[["DE-Hetzdorf"]]        = c(13.48978 , 50.96381)
workPoints[["DE-Hainich"]]         = c(10.452089, 51.079407)
workPoints[["DE-Wustebach"]]       = c(6.3309627, 50.50493)
workPoints[["DE-Mooseurach"]]      = c(11.456168, 47.80918)
workPoints[["DE-Hartheim"]]        = c( 7.5981  , 47.933)
workPoints[["DK-Risoe"]]           = c(12.101398, 55.680683)
workPoints[["DK-Soroe"]]           = c(11.644645, 55.48587)
workPoints[["DK-Gludsted"]]        = c( 9.3341  , 56.0737)
workPoints[["NO-Hurdal"]]          = c(11.07949 , 60.37163)
workPoints[["SE-Hyltemossa"]]      = c(13.41897 , 56.09763)
workPoints[["SE-Norunda"]]         = c(17.479504, 60.0865)
workPoints[["SE-Svartberget"]]     = c(19.7745  , 64.25611)
workPoints[["FI-Hyytiala"]]        = c(24.29477 , 61.84741)
workPoints[["FI-Varrio"]]          = c(29.61    , 67.7549)
workPoints[["FI-Sodankyla"]]       = c(26.63859 , 67.36239)
workPoints[["FI-Kenttarova"]]      = c(24.24301 , 67.98721)
siteNames = names(workPoints)
}
# Different file characteristics
# common files characteristics
areaFileName = "_10W-45N-30E-81N"
# climate file characteristics
# climate_type_file = ".csv"
prefix = 'ERA_'
suffix = '_1990-2022'
check_clim_exist  = TRUE
check_clim_values = FALSE ## Check climate file (to remove NA) <== PUT TRUE ONCE
source(file.path(SurEau_mainDir,"scripts_base_simulations/Fonctions_InversionRU.R"))
SurEau_mainDir
source(file.path(SurEau_mainDir,"Inversion_Ecos_TAW/Fonctions_InversionRU.R"))
source(file.path(SurEau_mainDir,'functions/load.SurEau_Ecos.R')) # do not modify
mainDir
mainDir=SurEau_mainDir
source(file.path(SurEau_mainDir,'functions/load.SurEau_Ecos.R')) # do not modify
modeling_options <- create.modeling.options(transpirationModel = transpiModel, PedoTransferFormulation = methodPedoTransf, timeStepForEvapo = sureauTimeStep, compOptionsForEvapo = sureauOptionEvapo, printProg = F, thresholdMortality = thresholdMortality, resetSWC = resetSWC)
TAW_results = inversionTAW(selectPoints, id_site, x_site, y_site,clim_site, forest_type, idigit,
QPLCl9_target, max_simu, model_varLim, QPLCl9_target_tolerence, maxCoarseFrag, iPtsDiag, save_pdf,
nameProject, simuName, startYear, simuNbYear, SurEau_mainDir, outputType, methodPedoTransf, soil_files_folder, surEauClimate_path, overWriteOutput, modeling_options,
profondeur_soil, SE_coarseFrag_1, SE_coarseFrag_2, SE_coarseFrag_3,
SE_fieldCap, SE_wiltPoint, SE_vg_alpha, SE_vg_n, SE_vg_I, SE_vg_ksat,
SE_vg_sat_cap, SE_vg_res_cap, SE_gsoil, SE_depth1, SE_depth2, SE_depth3, SE_offSetPsoil,graphPerPlot = 1)
TAW_results = inversionTAW(selectPoints, id_site, x_site, y_site,clim_site, forest_type, idigit,
QPLCl9_target, max_simu, model_varLim, QPLCl9_target_tolerence, maxCoarseFrag, iPtsDiag, save_pdf,
nameProject, simuName, startYear, simuNbYear, SurEau_mainDir, outputType, methodPedoTransf, soil_files_folder, surEauClimate_path, overWriteOutput, modeling_options,
profondeur_soil, SE_coarseFrag_1, SE_coarseFrag_2, SE_coarseFrag_3,
SE_fieldCap, SE_wiltPoint, SE_vg_alpha, SE_vg_n, SE_vg_I, SE_vg_ksat,
SE_vg_sat_cap, SE_vg_res_cap, SE_gsoil, SE_depth1, SE_depth2, SE_depth3, SE_offSetPsoil,graphPerPlot = 1)
selectPoints
# Initialization ---------------------------------------------------------------
rm(list = ls()) # Clear environment
gc()            # Clear memory
# Set paths  -----------------------------------------------------------------
mainDir <- dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
climateData_path          <- paste0(mainDir,'/quick_start/climat_example.csv')
soilParameters_path       <- paste0(mainDir,'/quick_start/Soil_example.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_deciduousBeech.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_evergreenOak.csv')
output_path               <- paste0(mainDir,'/quick_start/example_output_subdaily.csv')
# Load model -------------------------------------------------------------------
source(paste0(mainDir,'/functions/load.SurEau_Ecos.R')) # do not modify
modeling_options <- create.modeling.options(transpirationModel = c('Jarvis'))
simulation_parameters <- create.simulation.parameters(startYearSimulation = 1990,
endYearSimulation = 1990,
mainDir = mainDir,
outputType = 'LFMC_subdaily',
overWrite = T,
outputPath = output_path)
climate_data          <- create.climate.data(filePath = climateData_path,
modeling_options = modeling_options,
simulation_parameters = simulation_parameters) #
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = 6.23)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
modeling_options <- create.modeling.options(transpirationModel = c('Jarvis'),
constantClimate = T)
simulation_parameters <- create.simulation.parameters(startYearSimulation = 1990,
endYearSimulation = 1990,
mainDir = mainDir,
outputType = 'LFMC_subdaily',
overWrite = T,
outputPath = output_path)
climate_data          <- create.climate.data(filePath = climateData_path,
modeling_options = modeling_options,
simulation_parameters = simulation_parameters) #
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = 6.23)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
# Initialization ---------------------------------------------------------------
rm(list = ls()) # Clear environment
gc()            # Clear memory
# Set paths  -----------------------------------------------------------------
mainDir <- dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
climateData_path          <- paste0(mainDir,'/quick_start/climat_example.csv')
soilParameters_path       <- paste0(mainDir,'/quick_start/Soil_example.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_deciduousBeech.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_evergreenOak.csv')
output_path               <- paste0(mainDir,'/quick_start/example_output_subdaily.csv')
# Load model -------------------------------------------------------------------
source(paste0(mainDir,'/functions/load.SurEau_Ecos.R')) # do not modify
modeling_options <- create.modeling.options(transpirationModel = c('Jarvis'),
constantClimate = T)
simulation_parameters <- create.simulation.parameters(startYearSimulation = 1990,
endYearSimulation = 1990,
mainDir = mainDir,
outputType = 'LFMC_subdaily',
overWrite = T,
outputPath = output_path)
climate_data          <- create.climate.data(filePath = climateData_path,
modeling_options = modeling_options,
simulation_parameters = simulation_parameters) #
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = 6.23)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
# Plot outputs -----------------------------------------------------------------
# load output file
filename  = paste0(mainDir,"/quick_start/example_output_subdaily.csv")
DATA      = read.csv(filename,header=T, dec='.', sep="")
DATA$Time = as.POSIXct(DATA$Time,format='%Y-%m-%d/%H:%M:%S')
filename  = paste0(mainDir,"/quick_start/example_output_subdailyJarvis.csv")
DATAJ      = read.csv(filename,header=T, dec='.', sep="")
DATAJ$Time = as.POSIXct(DATA$Time,format='%Y-%m-%d/%H:%M:%S')
# plot water fluxes
plot(DATA$Time,DATA$transpiration_mm,type='l',col='green',xlab='Time',ylab='water fluxes (mm/timestep)', ylim=c(0,0.5))
lines(DATAJ$Time,DATAJ$transpiration_mm,type='l',col='blue',xlab='Time',ylab='water fluxes (mm/timestep)')
# plot Plant water potentials
plot(DATA$Time,DATA$Psi_LSym,type='l', col='springgreen2',ylim=c(-4,0),xlab='Time',ylab='Psi (MPa)')
lines(DATA$Time,DATA$Psi_LApo,type='l',col='springgreen4')
lines(DATA$Time,DATA$Psi_SSym,type='l',col='firebrick1',ylim=c(-6,0))
lines(DATA$Time,DATA$Psi_SApo,type='l',col='firebrick4')
lines(DATA$Time,DATA$Psi_AllSoil,col='grey20',lwd=2)
legend('bottomright',
legend=c('Psi_Leaf_Symplasm','Psi_Leaf_Apoplasm','Psi_Stem_Symplasm','Psi_Stem_Apoplasm','Psi_Soil'),
col=c('springgreen2','springgreen4','firebrick1','firebrick4','grey30'),lty=1,lwd=2,cex=0.8)
# plot meteorological conditions
plot(DATA$Time,DATA$Tair,type='l',col='firebrick4',ylab='Air temperature (degC)', xlab='Time')
par(new=T)
barplot(DATA$PPT,col='blue',border='blue',axes=F,ylab='',xlab='',ylim=c(0,60))
axis(4,col='blue',col.ticks='blue')
# plot water fluxes
plot(DATA$Time,DATA$transpiration_mm,type='l',col='blue',xlab='Time',ylab='water fluxes (mm/timestep)')
# Initialization ---------------------------------------------------------------
rm(list = ls()) # Clear environment
gc()            # Clear memory
# Set paths  -----------------------------------------------------------------
mainDir <- dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
climateData_path          <- paste0(mainDir,'/quick_start/climat_example.csv')
soilParameters_path       <- paste0(mainDir,'/quick_start/Soil_example.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_deciduousBeech.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_evergreenOak.csv')
# Initialization ---------------------------------------------------------------
rm(list = ls()) # Clear environment
gc()            # Clear memory
# Set paths  -----------------------------------------------------------------
mainDir <- dirname(dirname(rstudioapi::getActiveDocumentContext()$path))
climateData_path          <- paste0(mainDir,'/quick_start/climat_example.csv')
soilParameters_path       <- paste0(mainDir,'/quick_start/Soil_example.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_deciduousBeech.csv')
vegetationParameters_path <- paste0(mainDir,'/quick_start/vegetation_example_evergreenOak.csv')
output_path               <- paste0(mainDir,'/quick_start/example_output_subdaily.csv')
# Load model -------------------------------------------------------------------
source(paste0(mainDir,'/functions/load.SurEau_Ecos.R')) # do not modify
modeling_options <- create.modeling.options(transpirationModel = c('Jarvis'),
constantClimate = F)
simulation_parameters <- create.simulation.parameters(startYearSimulation = 1990,
endYearSimulation = 1990,
mainDir = mainDir,
outputType = 'LFMC_subdaily',
overWrite = T,
outputPath = output_path)
climate_data          <- create.climate.data(filePath = climateData_path,
modeling_options = modeling_options,
simulation_parameters = simulation_parameters) #
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = 6.23)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
# Plot outputs -----------------------------------------------------------------
# load output file
filename  = paste0(mainDir,"/quick_start/example_output_subdaily.csv")
DATA      = read.csv(filename,header=T, dec='.', sep="")
DATA$Time = as.POSIXct(DATA$Time,format='%Y-%m-%d/%H:%M:%S')
# Plot outputs -----------------------------------------------------------------
# load output file
filename  = paste0(mainDir,"/quick_start/example_output_subdaily.csv")
DATA      = read.csv(filename,header=T, dec='.', sep="")
DATA$Time = as.POSIXct(DATA$Time,format='%Y-%m-%d/%H:%M:%S')
# plot water fluxes
plot(DATA$Time,DATA$transpiration_mm,type='l',col='green',xlab='Time',ylab='water fluxes (mm/timestep)', ylim=c(0,0.5))
lines(DATAJ$Time,DATAJ$transpiration_mm,type='l',col='blue',xlab='Time',ylab='water fluxes (mm/timestep)')
# plot Plant water potentials
plot(DATA$Time,DATA$Psi_LSym,type='l', col='springgreen2',ylim=c(-4,0),xlab='Time',ylab='Psi (MPa)')
lines(DATA$Time,DATA$Psi_LApo,type='l',col='springgreen4')
lines(DATA$Time,DATA$Psi_SSym,type='l',col='firebrick1',ylim=c(-6,0))
lines(DATA$Time,DATA$Psi_SApo,type='l',col='firebrick4')
lines(DATA$Time,DATA$Psi_AllSoil,col='grey20',lwd=2)
legend('bottomright',
legend=c('Psi_Leaf_Symplasm','Psi_Leaf_Apoplasm','Psi_Stem_Symplasm','Psi_Stem_Apoplasm','Psi_Soil'),
col=c('springgreen2','springgreen4','firebrick1','firebrick4','grey30'),lty=1,lwd=2,cex=0.8)
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = -6.23)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = -76.23)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
# Plot outputs -----------------------------------------------------------------
# load output file
filename  = paste0(mainDir,"/quick_start/example_output_subdaily.csv")
DATA      = read.csv(filename,header=T, dec='.', sep="")
DATA$Time = as.POSIXct(DATA$Time,format='%Y-%m-%d/%H:%M:%S')
filename  = paste0(mainDir,"/quick_start/example_output_subdailyJarvis.csv")
DATAJ      = read.csv(filename,header=T, dec='.', sep="")
DATAJ$Time = as.POSIXct(DATA$Time,format='%Y-%m-%d/%H:%M:%S')
# plot water fluxes
plot(DATA$Time,DATA$transpiration_mm,type='l',col='green',xlab='Time',ylab='water fluxes (mm/timestep)', ylim=c(0,0.5))
lines(DATAJ$Time,DATAJ$transpiration_mm,type='l',col='blue',xlab='Time',ylab='water fluxes (mm/timestep)')
# plot Plant water potentials
plot(DATA$Time,DATA$Psi_LSym,type='l', col='springgreen2',ylim=c(-4,0),xlab='Time',ylab='Psi (MPa)')
lines(DATA$Time,DATA$Psi_LApo,type='l',col='springgreen4')
lines(DATA$Time,DATA$Psi_SSym,type='l',col='firebrick1',ylim=c(-6,0))
lines(DATA$Time,DATA$Psi_SApo,type='l',col='firebrick4')
lines(DATA$Time,DATA$Psi_AllSoil,col='grey20',lwd=2)
stand_parameters      <- create.stand.parameters(LAImax = 4.5, lat = 48.73, lon = -72)
soil_parameters       <- create.soil.parameters(filePath = soilParameters_path,
modeling_options = modeling_options)
vegetation_parameters <- create.vegetation.parameters(filePath = vegetationParameters_path,
stand_parameters = stand_parameters,
soil_parameter = soil_parameters,
modeling_options = modeling_options)
output_path               <- paste0(mainDir,'/quick_start/example_output_subdailyJarvis.csv')
# run SurEau-Ecos --------------------------------------------------------------
run.SurEau_Ecos(modeling_options = modeling_options ,
simulation_parameters = simulation_parameters,
climate_data = climate_data,
stand_parameters = stand_parameters,
soil_parameters = soil_parameters,
vegetation_parameters = vegetation_parameters)
